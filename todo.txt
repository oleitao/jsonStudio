IDEIAS PARA UM IDE FOCO EM FICHEIROS JSON (.txt)

=== Núcleo do Editor ===
- Formatação e lint: prettifier configurável, deteção de chaves repetidas, trailing commas; suportar JSON, JSONC e JSON5.
- Validação por schema: validação em tempo real via JSON Schema (drafts recentes), hover para erros, quick-fixes, resolução automática de $ref (local/remoto).
- Vistas múltiplas sincronizadas: Texto ↔ Árvore (colapsável) ↔ Tabela (para arrays de objetos) ↔ Diff lado-a-lado.
- Pesquisa e transformação: suporte a JSONPath e integração com jq com live preview.
- Diff/Merge inteligente: comparação semântica “por chave” (não por linha), 3-way merge, deteção de nós movidos.
- Gestão de ficheiros grandes: parsing incremental/streaming, carregamento parcial e virtual scrolling.
- Autocompletar: sugestões com base no schema, snippets e geração automática de objetos válidos.
- Histórico por nó: undo/redo escopado ao ramo alterado.

=== Qualidade de Vida ===
- Deteção de secrets/PII: realce, redaction e avisos para chaves do tipo apiKey/password.
- Templates & boilerplates: criação a partir de schema; catálogo (OpenAPI, package.json, tsconfig…).
- Refactors: renomear chave globalmente, extrair subárvore para $ref, ordenar chaves com regras.
- Validação cruzada: regras custom (ex.: “se type=A então fields deve conter X”).
- Comentários: suporte a JSONC/JSON5 e preservação de comentários ao formatar.
- Atalhos rápidos: duplicar nó, mover ↑↓, embrulhar em objeto/array, converter tipos (string⇄número⇄boolean).

=== Visualização & Debugging ===
- Estatísticas: contagens, tamanhos, distribuição de tipos, chaves mais frequentes.
- Gráficos rápidos: barras/pizza a partir de arrays de objetos (ex.: status por contagem).
- Mapa de calor: destacar nós alterados recentemente ou com erros.
- Explorador de referências: navegar $id/$ref, “peek definition”.

=== Integrações com APIs & Dev-Tools ===
- Mock server: servidor local que responde conforme um JSON/Schema (latência e error rates simuláveis).
- Testes de contratos: comparar payloads com schemas (OpenAPI/AsyncAPI/Avro) e gerar relatórios.
- CLI embutida: executar jq, ajv, yq (para YAML⇄JSON), com “copy as command”.
- Git integrado: blame por nó, inline diff, pre-commit hooks (lint/validate).
- Conetores: S3/GCS, URLs remotos, workspaces com auto refresh.

=== Experiências Avançadas ===
- Inferência de schemas: gerar JSON Schema a partir de múltiplos exemplos (tolerante a variações).
- Assistente de transformações: “explica/gera um jq para transformar A→B” (possível uso de IA).
- Validação de segurança: limites de tamanho, chaves proibidas, detector de PII.
- Localização: key maps para i18n (detetar chaves não traduzidas entre ficheiros).

=== UX/UI ===
- Comando global (⌘K): ações, chaves, paths, schemas.
- Breadcrumbs: mostrar $.orders[12].items[3].price com clique para saltar.
- Pins: fixar nós favoritos no topo.
- Inspeção rápida: hover mostra amostras e metadados (tamanho bytes, profundidade).
- Temas e acessibilidade: alto contraste, fontes mono configuráveis, RTL-ready.

=== Arquitetura Sugerida ===
- Desktop (cross-platform): Electron ou Tauri + Monaco Editor; validação com ajv; workers para parsing; Rust (Serde/Simdjson) via Tauri para ficheiros enormes.
- Web: React + Monaco, ajv + json-source-map (mapa posição→nó), Web Workers para não bloquear a UI.
- Back-end opcional: Node/Rust para comparações pesadas, armazenamento de schemas e auditorias.

=== Roadmap Exemplo ===
1) MVP (2–3 semanas): editor Monaco, formatação, vista árvore, validação AJV, abrir/guardar, JSONPath básico.
2) Versão Pro: diff/merge por nó, jq integrado, autocompletar por schema, templates, Git.
3) Versão Team: mock server, testes de contrato, conetores remotos, políticas de segurança, colaboração em tempo real (CRDTs).

=== Extras para Brilhar ===
- “Explain this error”: traduz mensagens de validação para linguagem natural e sugere correções.
- Gerador de dados falsos: a partir do schema (faker/json-schema-faker) para testes.
- Comandos rápidos “/”: /sort keys, /flatten, /dedupe, /to csv.
- Exportações: CSV (com seleção de colunas), YAML, NDJSON, Parquet (via wasm/arrow).

