name: jsonstudio
base: core24
adopt-info: meta                      # <- versão vem deste "part"
summary: JSON editor and viewer (Qt)
description: |
  jsonStudio is a simple JSON editor/viewer built with Qt and Python.
  It supports viewing as a tree, validation, filtering and basic styling.

grade: stable
confinement: strict

platforms:
  amd64:
    build-on: [amd64, arm64]
  arm64:
    build-on: [arm64]

apps:
  jsonstudio:
    command: bin/jsonstudio
    plugs:
      - x11
      - wayland
      - opengl
      - network
      - home
      - audio-playback
    environment:
      QT_QPA_PLATFORM: xcb

parts:
  # --- Parte responsável pelo versionamento automático ---
  meta:
    plugin: nil
    source: ..
    override-pull: |
      set -eux
      # Garante que as tags estão disponíveis (no Launchpad costuma estar, mas por via das dúvidas):
      git fetch --tags || true

      # Tenta obter versão a partir de tags; ex.: v1.2.3-4-gABCDEF[-dirty]
      ver="$(git describe --tags --dirty --always || true)"

      # Fallback para quando não há tags: YYYY.MM.DD-g<sha>
      if [ -z "$ver" ]; then
        ver="$(date -u +%Y.%m.%d)-g$(git rev-parse --short HEAD)"
      fi

      craftctl set version="$ver"

  # --- A aplicação em si (PyQt) ---
  jsonstudio:
    plugin: python
    source: ..
    stage-packages:
      - python3
      - python3-pyqt5
      - python3-jsonschema
      - libgl1
      - libglib2.0-0
      - libx11-6
      - libxkbcommon0
      - libxext6
      - libxrender1
      - libxi6
      - libxfixes3
      - libxrandr2
      - libxinerama1
      - libxcb1
      - libxcb-keysyms1
      - libxcb-render0
      - libxcb-shape0
      - libxcb-shm0
      - libxcb-xfixes0
      - libxcb-icccm4
    override-build: |
      set -eux
      craftctl default

      # Instala o launcher
      install -D -m 0755 /dev/stdin "$CRAFT_PART_INSTALL/bin/jsonstudio" <<'EOF'
      #!/bin/sh
      export QT_QPA_PLATFORM="${QT_QPA_PLATFORM:-xcb}"
      PYBIN="$SNAP/venv/bin/python3"
      [ -x "$PYBIN" ] || PYBIN="/usr/bin/python3"
      cd "$SNAP/app"
      exec "$PYBIN" main.py "$@"
      EOF

      # Copia o código da app (na raiz do repo)
      mkdir -p "$CRAFT_PART_INSTALL/app"
      cp -a "$CRAFT_PART_SRC"/. "$CRAFT_PART_INSTALL/app/"

      # Copia .desktop e ícones para os locais esperados pelos snaps
      if [ -d "$CRAFT_PART_SRC/snap/gui" ]; then
        mkdir -p "$CRAFT_PART_INSTALL/snap/gui" "$CRAFT_PART_INSTALL/meta/gui"
        cp -a "$CRAFT_PART_SRC/snap/gui/." "$CRAFT_PART_INSTALL/snap/gui/"
        cp -a "$CRAFT_PART_SRC/snap/gui/." "$CRAFT_PART_INSTALL/meta/gui/"
      fi
